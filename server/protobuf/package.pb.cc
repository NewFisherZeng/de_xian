// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: package.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "package.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* c2s_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c2s_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* s2c_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s2c_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* c2s_create_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c2s_create_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* s2c_create_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s2c_create_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* c2s_quit_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c2s_quit_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* s2c_quit_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s2c_quit_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* c2s_enter_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c2s_enter_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* s2c_enter_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s2c_enter_room_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_package_2eproto() {
  protobuf_AddDesc_package_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "package.proto");
  GOOGLE_CHECK(file != NULL);
  c2s_login_descriptor_ = file->message_type(0);
  static const int c2s_login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_login, uid_),
  };
  c2s_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c2s_login_descriptor_,
      c2s_login::default_instance_,
      c2s_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c2s_login));
  s2c_login_descriptor_ = file->message_type(1);
  static const int s2c_login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_login, result_),
  };
  s2c_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s2c_login_descriptor_,
      s2c_login::default_instance_,
      s2c_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s2c_login));
  c2s_create_room_descriptor_ = file->message_type(2);
  static const int c2s_create_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_create_room, type_),
  };
  c2s_create_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c2s_create_room_descriptor_,
      c2s_create_room::default_instance_,
      c2s_create_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_create_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_create_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c2s_create_room));
  s2c_create_room_descriptor_ = file->message_type(3);
  static const int s2c_create_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_create_room, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_create_room, room_id_),
  };
  s2c_create_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s2c_create_room_descriptor_,
      s2c_create_room::default_instance_,
      s2c_create_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_create_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_create_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s2c_create_room));
  c2s_quit_room_descriptor_ = file->message_type(4);
  static const int c2s_quit_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_quit_room, room_id_),
  };
  c2s_quit_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c2s_quit_room_descriptor_,
      c2s_quit_room::default_instance_,
      c2s_quit_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_quit_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_quit_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c2s_quit_room));
  s2c_quit_room_descriptor_ = file->message_type(5);
  static const int s2c_quit_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_quit_room, result_),
  };
  s2c_quit_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s2c_quit_room_descriptor_,
      s2c_quit_room::default_instance_,
      s2c_quit_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_quit_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_quit_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s2c_quit_room));
  c2s_enter_room_descriptor_ = file->message_type(6);
  static const int c2s_enter_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_enter_room, room_id_),
  };
  c2s_enter_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c2s_enter_room_descriptor_,
      c2s_enter_room::default_instance_,
      c2s_enter_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_enter_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2s_enter_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c2s_enter_room));
  s2c_enter_room_descriptor_ = file->message_type(7);
  static const int s2c_enter_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_enter_room, result_),
  };
  s2c_enter_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s2c_enter_room_descriptor_,
      s2c_enter_room::default_instance_,
      s2c_enter_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_enter_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s2c_enter_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s2c_enter_room));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_package_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c2s_login_descriptor_, &c2s_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s2c_login_descriptor_, &s2c_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c2s_create_room_descriptor_, &c2s_create_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s2c_create_room_descriptor_, &s2c_create_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c2s_quit_room_descriptor_, &c2s_quit_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s2c_quit_room_descriptor_, &s2c_quit_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c2s_enter_room_descriptor_, &c2s_enter_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s2c_enter_room_descriptor_, &s2c_enter_room::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_package_2eproto() {
  delete c2s_login::default_instance_;
  delete c2s_login_reflection_;
  delete s2c_login::default_instance_;
  delete s2c_login_reflection_;
  delete c2s_create_room::default_instance_;
  delete c2s_create_room_reflection_;
  delete s2c_create_room::default_instance_;
  delete s2c_create_room_reflection_;
  delete c2s_quit_room::default_instance_;
  delete c2s_quit_room_reflection_;
  delete s2c_quit_room::default_instance_;
  delete s2c_quit_room_reflection_;
  delete c2s_enter_room::default_instance_;
  delete c2s_enter_room_reflection_;
  delete s2c_enter_room::default_instance_;
  delete s2c_enter_room_reflection_;
}

void protobuf_AddDesc_package_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpackage.proto\022\002pb\"\030\n\tc2s_login\022\013\n\003uid\030"
    "\001 \002(\r\"\033\n\ts2c_login\022\016\n\006result\030\001 \002(\005\"\037\n\017c2"
    "s_create_room\022\014\n\004type\030\001 \002(\r\"2\n\017s2c_creat"
    "e_room\022\016\n\006result\030\001 \002(\005\022\017\n\007room_id\030\002 \002(\r\""
    " \n\rc2s_quit_room\022\017\n\007room_id\030\001 \002(\r\"\037\n\rs2c"
    "_quit_room\022\016\n\006result\030\001 \002(\005\"!\n\016c2s_enter_"
    "room\022\017\n\007room_id\030\001 \002(\r\" \n\016s2c_enter_room\022"
    "\016\n\006result\030\001 \002(\005", 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "package.proto", &protobuf_RegisterTypes);
  c2s_login::default_instance_ = new c2s_login();
  s2c_login::default_instance_ = new s2c_login();
  c2s_create_room::default_instance_ = new c2s_create_room();
  s2c_create_room::default_instance_ = new s2c_create_room();
  c2s_quit_room::default_instance_ = new c2s_quit_room();
  s2c_quit_room::default_instance_ = new s2c_quit_room();
  c2s_enter_room::default_instance_ = new c2s_enter_room();
  s2c_enter_room::default_instance_ = new s2c_enter_room();
  c2s_login::default_instance_->InitAsDefaultInstance();
  s2c_login::default_instance_->InitAsDefaultInstance();
  c2s_create_room::default_instance_->InitAsDefaultInstance();
  s2c_create_room::default_instance_->InitAsDefaultInstance();
  c2s_quit_room::default_instance_->InitAsDefaultInstance();
  s2c_quit_room::default_instance_->InitAsDefaultInstance();
  c2s_enter_room::default_instance_->InitAsDefaultInstance();
  s2c_enter_room::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_package_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_package_2eproto {
  StaticDescriptorInitializer_package_2eproto() {
    protobuf_AddDesc_package_2eproto();
  }
} static_descriptor_initializer_package_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int c2s_login::kUidFieldNumber;
#endif  // !_MSC_VER

c2s_login::c2s_login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.c2s_login)
}

void c2s_login::InitAsDefaultInstance() {
}

c2s_login::c2s_login(const c2s_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.c2s_login)
}

void c2s_login::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c2s_login::~c2s_login() {
  // @@protoc_insertion_point(destructor:pb.c2s_login)
  SharedDtor();
}

void c2s_login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c2s_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c2s_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c2s_login_descriptor_;
}

const c2s_login& c2s_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2eproto();
  return *default_instance_;
}

c2s_login* c2s_login::default_instance_ = NULL;

c2s_login* c2s_login::New() const {
  return new c2s_login;
}

void c2s_login::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c2s_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.c2s_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.c2s_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.c2s_login)
  return false;
#undef DO_
}

void c2s_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.c2s_login)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.c2s_login)
}

::google::protobuf::uint8* c2s_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.c2s_login)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.c2s_login)
  return target;
}

int c2s_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c2s_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c2s_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c2s_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c2s_login::MergeFrom(const c2s_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c2s_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c2s_login::CopyFrom(const c2s_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2s_login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c2s_login::Swap(c2s_login* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c2s_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c2s_login_descriptor_;
  metadata.reflection = c2s_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s2c_login::kResultFieldNumber;
#endif  // !_MSC_VER

s2c_login::s2c_login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.s2c_login)
}

void s2c_login::InitAsDefaultInstance() {
}

s2c_login::s2c_login(const s2c_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.s2c_login)
}

void s2c_login::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s2c_login::~s2c_login() {
  // @@protoc_insertion_point(destructor:pb.s2c_login)
  SharedDtor();
}

void s2c_login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s2c_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s2c_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s2c_login_descriptor_;
}

const s2c_login& s2c_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2eproto();
  return *default_instance_;
}

s2c_login* s2c_login::default_instance_ = NULL;

s2c_login* s2c_login::New() const {
  return new s2c_login;
}

void s2c_login::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s2c_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.s2c_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.s2c_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.s2c_login)
  return false;
#undef DO_
}

void s2c_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.s2c_login)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.s2c_login)
}

::google::protobuf::uint8* s2c_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2c_login)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2c_login)
  return target;
}

int s2c_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s2c_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s2c_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s2c_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s2c_login::MergeFrom(const s2c_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s2c_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s2c_login::CopyFrom(const s2c_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void s2c_login::Swap(s2c_login* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s2c_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s2c_login_descriptor_;
  metadata.reflection = s2c_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c2s_create_room::kTypeFieldNumber;
#endif  // !_MSC_VER

c2s_create_room::c2s_create_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.c2s_create_room)
}

void c2s_create_room::InitAsDefaultInstance() {
}

c2s_create_room::c2s_create_room(const c2s_create_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.c2s_create_room)
}

void c2s_create_room::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c2s_create_room::~c2s_create_room() {
  // @@protoc_insertion_point(destructor:pb.c2s_create_room)
  SharedDtor();
}

void c2s_create_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c2s_create_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c2s_create_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c2s_create_room_descriptor_;
}

const c2s_create_room& c2s_create_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2eproto();
  return *default_instance_;
}

c2s_create_room* c2s_create_room::default_instance_ = NULL;

c2s_create_room* c2s_create_room::New() const {
  return new c2s_create_room;
}

void c2s_create_room::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c2s_create_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.c2s_create_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.c2s_create_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.c2s_create_room)
  return false;
#undef DO_
}

void c2s_create_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.c2s_create_room)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.c2s_create_room)
}

::google::protobuf::uint8* c2s_create_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.c2s_create_room)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.c2s_create_room)
  return target;
}

int c2s_create_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c2s_create_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c2s_create_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c2s_create_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c2s_create_room::MergeFrom(const c2s_create_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c2s_create_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c2s_create_room::CopyFrom(const c2s_create_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2s_create_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c2s_create_room::Swap(c2s_create_room* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c2s_create_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c2s_create_room_descriptor_;
  metadata.reflection = c2s_create_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s2c_create_room::kResultFieldNumber;
const int s2c_create_room::kRoomIdFieldNumber;
#endif  // !_MSC_VER

s2c_create_room::s2c_create_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.s2c_create_room)
}

void s2c_create_room::InitAsDefaultInstance() {
}

s2c_create_room::s2c_create_room(const s2c_create_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.s2c_create_room)
}

void s2c_create_room::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s2c_create_room::~s2c_create_room() {
  // @@protoc_insertion_point(destructor:pb.s2c_create_room)
  SharedDtor();
}

void s2c_create_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s2c_create_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s2c_create_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s2c_create_room_descriptor_;
}

const s2c_create_room& s2c_create_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2eproto();
  return *default_instance_;
}

s2c_create_room* s2c_create_room::default_instance_ = NULL;

s2c_create_room* s2c_create_room::New() const {
  return new s2c_create_room;
}

void s2c_create_room::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<s2c_create_room*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, room_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s2c_create_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.s2c_create_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // required uint32 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.s2c_create_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.s2c_create_room)
  return false;
#undef DO_
}

void s2c_create_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.s2c_create_room)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.s2c_create_room)
}

::google::protobuf::uint8* s2c_create_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2c_create_room)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2c_create_room)
  return target;
}

int s2c_create_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s2c_create_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s2c_create_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s2c_create_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s2c_create_room::MergeFrom(const s2c_create_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s2c_create_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s2c_create_room::CopyFrom(const s2c_create_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_create_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void s2c_create_room::Swap(s2c_create_room* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s2c_create_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s2c_create_room_descriptor_;
  metadata.reflection = s2c_create_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c2s_quit_room::kRoomIdFieldNumber;
#endif  // !_MSC_VER

c2s_quit_room::c2s_quit_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.c2s_quit_room)
}

void c2s_quit_room::InitAsDefaultInstance() {
}

c2s_quit_room::c2s_quit_room(const c2s_quit_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.c2s_quit_room)
}

void c2s_quit_room::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c2s_quit_room::~c2s_quit_room() {
  // @@protoc_insertion_point(destructor:pb.c2s_quit_room)
  SharedDtor();
}

void c2s_quit_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c2s_quit_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c2s_quit_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c2s_quit_room_descriptor_;
}

const c2s_quit_room& c2s_quit_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2eproto();
  return *default_instance_;
}

c2s_quit_room* c2s_quit_room::default_instance_ = NULL;

c2s_quit_room* c2s_quit_room::New() const {
  return new c2s_quit_room;
}

void c2s_quit_room::Clear() {
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c2s_quit_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.c2s_quit_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.c2s_quit_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.c2s_quit_room)
  return false;
#undef DO_
}

void c2s_quit_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.c2s_quit_room)
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.c2s_quit_room)
}

::google::protobuf::uint8* c2s_quit_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.c2s_quit_room)
  // required uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.c2s_quit_room)
  return target;
}

int c2s_quit_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c2s_quit_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c2s_quit_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c2s_quit_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c2s_quit_room::MergeFrom(const c2s_quit_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c2s_quit_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c2s_quit_room::CopyFrom(const c2s_quit_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2s_quit_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c2s_quit_room::Swap(c2s_quit_room* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c2s_quit_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c2s_quit_room_descriptor_;
  metadata.reflection = c2s_quit_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s2c_quit_room::kResultFieldNumber;
#endif  // !_MSC_VER

s2c_quit_room::s2c_quit_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.s2c_quit_room)
}

void s2c_quit_room::InitAsDefaultInstance() {
}

s2c_quit_room::s2c_quit_room(const s2c_quit_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.s2c_quit_room)
}

void s2c_quit_room::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s2c_quit_room::~s2c_quit_room() {
  // @@protoc_insertion_point(destructor:pb.s2c_quit_room)
  SharedDtor();
}

void s2c_quit_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s2c_quit_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s2c_quit_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s2c_quit_room_descriptor_;
}

const s2c_quit_room& s2c_quit_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2eproto();
  return *default_instance_;
}

s2c_quit_room* s2c_quit_room::default_instance_ = NULL;

s2c_quit_room* s2c_quit_room::New() const {
  return new s2c_quit_room;
}

void s2c_quit_room::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s2c_quit_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.s2c_quit_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.s2c_quit_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.s2c_quit_room)
  return false;
#undef DO_
}

void s2c_quit_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.s2c_quit_room)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.s2c_quit_room)
}

::google::protobuf::uint8* s2c_quit_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2c_quit_room)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2c_quit_room)
  return target;
}

int s2c_quit_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s2c_quit_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s2c_quit_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s2c_quit_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s2c_quit_room::MergeFrom(const s2c_quit_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s2c_quit_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s2c_quit_room::CopyFrom(const s2c_quit_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_quit_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void s2c_quit_room::Swap(s2c_quit_room* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s2c_quit_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s2c_quit_room_descriptor_;
  metadata.reflection = s2c_quit_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c2s_enter_room::kRoomIdFieldNumber;
#endif  // !_MSC_VER

c2s_enter_room::c2s_enter_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.c2s_enter_room)
}

void c2s_enter_room::InitAsDefaultInstance() {
}

c2s_enter_room::c2s_enter_room(const c2s_enter_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.c2s_enter_room)
}

void c2s_enter_room::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c2s_enter_room::~c2s_enter_room() {
  // @@protoc_insertion_point(destructor:pb.c2s_enter_room)
  SharedDtor();
}

void c2s_enter_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c2s_enter_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c2s_enter_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c2s_enter_room_descriptor_;
}

const c2s_enter_room& c2s_enter_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2eproto();
  return *default_instance_;
}

c2s_enter_room* c2s_enter_room::default_instance_ = NULL;

c2s_enter_room* c2s_enter_room::New() const {
  return new c2s_enter_room;
}

void c2s_enter_room::Clear() {
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c2s_enter_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.c2s_enter_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.c2s_enter_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.c2s_enter_room)
  return false;
#undef DO_
}

void c2s_enter_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.c2s_enter_room)
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.c2s_enter_room)
}

::google::protobuf::uint8* c2s_enter_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.c2s_enter_room)
  // required uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.c2s_enter_room)
  return target;
}

int c2s_enter_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c2s_enter_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c2s_enter_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c2s_enter_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c2s_enter_room::MergeFrom(const c2s_enter_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c2s_enter_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c2s_enter_room::CopyFrom(const c2s_enter_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2s_enter_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c2s_enter_room::Swap(c2s_enter_room* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c2s_enter_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c2s_enter_room_descriptor_;
  metadata.reflection = c2s_enter_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int s2c_enter_room::kResultFieldNumber;
#endif  // !_MSC_VER

s2c_enter_room::s2c_enter_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.s2c_enter_room)
}

void s2c_enter_room::InitAsDefaultInstance() {
}

s2c_enter_room::s2c_enter_room(const s2c_enter_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.s2c_enter_room)
}

void s2c_enter_room::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s2c_enter_room::~s2c_enter_room() {
  // @@protoc_insertion_point(destructor:pb.s2c_enter_room)
  SharedDtor();
}

void s2c_enter_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s2c_enter_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s2c_enter_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s2c_enter_room_descriptor_;
}

const s2c_enter_room& s2c_enter_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2eproto();
  return *default_instance_;
}

s2c_enter_room* s2c_enter_room::default_instance_ = NULL;

s2c_enter_room* s2c_enter_room::New() const {
  return new s2c_enter_room;
}

void s2c_enter_room::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s2c_enter_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.s2c_enter_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.s2c_enter_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.s2c_enter_room)
  return false;
#undef DO_
}

void s2c_enter_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.s2c_enter_room)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.s2c_enter_room)
}

::google::protobuf::uint8* s2c_enter_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2c_enter_room)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2c_enter_room)
  return target;
}

int s2c_enter_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s2c_enter_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s2c_enter_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s2c_enter_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s2c_enter_room::MergeFrom(const s2c_enter_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s2c_enter_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s2c_enter_room::CopyFrom(const s2c_enter_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_enter_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void s2c_enter_room::Swap(s2c_enter_room* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s2c_enter_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s2c_enter_room_descriptor_;
  metadata.reflection = s2c_enter_room_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
